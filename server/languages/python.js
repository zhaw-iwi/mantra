/**
 * Created by hce on 08/07/15.
 *
 * Language properties file projects of type Python.
 */

'use strict';

var util = require('../util.js'),
  CONST = require('../config/const.js');


module.exports = {

  // name of the language
  name: CONST.LANGUAGE_NAME.PYTHON,

  // file extension of the source files
  filenameExtension: '.py',

  // is this a static or dynamic language? e.g. Python is dynamic
  isDynamicLanguage: true,

  // does the language come with supports for (unit) tests?
  isLanguageWithTestSupport: false,

  // name of the docker image that is used to execute "compile" or "run" for this language
  dockerImage: 'cobo/python',

  // timeout settings that will apply to all containers of this language
  timeoutSettings: {
    // time (sec) that's the maximum allowed CPU usage time
    cpu: 12,
    // time (sec) that's the maximum allowed session time, i.e. the time before a running container is terminated
    session: 900, // 15 minutes
    // time (sec) that's the maximum allowed session time in case a session is NOT a WS streaming session (i.e. no user input)
    // Note that the timeoutCPU still applies
    sessionNoStream: 20,
  },

  // path of the working directory relative to the folder with the mantraId (used when we need to move into "/Root")
  // e.g. value "Root" would allow us to construct /tmp/projects/mantraId/ + ./Root
  dockerWorkingDirRel: '',

  // is a codeboard configuration file (e.g. codeboard.json) required and (if yes) which properties must it provide
  codeboardConfig: {
    isRequired: true,

    expectedProperties: [
      "MainFileForRunning"
    ]
  },


  /**
   * Function returns the command to run a project of this language.
   * @param {object} aCodeboardConfig the codeboardConfig object
   */
  getCommandForRunAction: function (aCodeboardConfig) {
    var cmd = 'python ./Root/' + aCodeboardConfig.MainFileForRunning;
    return cmd;
  },


  /**
   * Function returns the command to compile a project of this language.
   * @param {file[]} aFiles array of source files
   * @param {object} aCodeboardConfig the codeboardConfig object
   */
  getCommandForCompileAction: function (aFiles, aCodeboardConfig) {
    return this.getCommandForRunAction(aCodeboardConfig);
  },


  /**
   * Function takes a compiler output as argument and returns "true" if that output
   * implies that the compilation had one or more errors.
   * By default (e.g. for dynamic languages) this function should return false.
   * @param {string} aCompilerOutput  the output generated by the compiler
   * @returns {boolean} true is "aCompilerOutput" represents compilation errors (by default false)
   */
  hasCompilationErrors: function (aCompilerOutput) {
    return false;
  }
};
